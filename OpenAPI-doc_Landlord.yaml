openapi: 3.0.3
info:
  title: Landlord - maintenance assist API
  description: |-
    Simple API for Landlord maintenance assist webapplication. The API based on REST software architectural style. It accepts JSON-encoded request bodies and returns JSON-encoded responses. It handles user management with Google Oauth2 standards and uses No-SQL database to store user's data.
  contact:
    email: gaborneubaue.hda@gmail.com
  version: 1.2.1
servers:
  - url: http://localhost:3003/api
tags:
  - name: docs
    description: Serving API documentation
  - name: login
    description: Managing login with Google and saving user
  - name: user
    description: Operations about user
  - name: health
    description: Liveness probe
  - name: ready
    description: Readiness probe
paths:
  /docs:
    get:
      tags:
        - docs
      summary: "Serving OpenApi 3.0 documentation in HTML format"
      description: "The application server serves the whole OpenApi 3.0 documentation at /api/docs endpoint. The response is in HTML format, the browser displays it via Swagger UI."
      responses:
        '200':
          $ref: '#/components/responses/200-docs'
        '405':
          $ref: '#/components/responses/405'
  /login:
    post:
      tags:
        - login
      summary: Logs user into the system and save user's data
      description: "After authentication the server searches for user in databes. If user is new, the server creates a user document in database. In both cases server generates and signs a session jwt with user's name, email address, profile picture url and unique sub in payload. It has expiration as well. Session token is sent to client in response body."
      requestBody:
            $ref: '#/components/requestBodies/Login'
      responses:
        '200':
          $ref: '#/components/responses/200-login'
        '400':
          $ref: '#/components/responses/400-login'
        '401':
          $ref: '#/components/responses/401-login'
        '405':
          $ref: '#/components/responses/405'
        '503':
          $ref: '#/components/responses/503-login'
  /user:
    get:
      tags:
        - user
      summary: Retrieves an existent user
      description: "Returns a user object indentified by user's unique sub"
      security:
       - authorization: []
      responses:
        '200':
          $ref: '#/components/responses/200-user'
        '400':
          $ref: '#/components/responses/400-user'
        '401':
          $ref: '#/components/responses/401-user'
        '404':
          $ref: '#/components/responses/404-user'
        '405':
          $ref: '#/components/responses/405'
    put:
      tags:
        - user
      summary: Updates an existent user
      description: Returns the updated user object
      security:
       - authorization: []
      requestBody:
         $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:  
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400-user'
        '401':
          $ref: '#/components/responses/401-user'
        '404':
          $ref: '#/components/responses/404-user'
        '405':
          $ref: '#/components/responses/405'
    delete:
      tags:
        - user
      summary: Deletes a user
      description: "Returns 204 when user is permanently removed from database with it's all data."
      security:
       - authorization: []
      responses:
        '204':
          $ref: '#/components/responses/204-user'
        '400':
          $ref: '#/components/responses/400-user'
        '401':
          $ref: '#/components/responses/401-user'
        '404':
          $ref: '#/components/responses/404-user'
        '405':
          $ref: '#/components/responses/405'
  /health:
    get:
      tags:
        - health
      summary: Health check
      description: "Checks if application server is running and it's ready to serve traffic."
      responses:
        '200':
          $ref: '#/components/responses/200-healthy'
        '405':
          $ref: '#/components/responses/405'
  /ready:
    get:
      tags:
        - ready
      summary: Ready check
      description: "Checks if application server is running and all external dependencies are accessible and ready. The server is ready to serve requests."
      responses:
        '200':
          $ref: '#/components/responses/200-healthy'
        '405':
          $ref: '#/components/responses/405'
        '503':
          $ref: '#/components/responses/503'


components:

  responses:
    200-docs:
      description: 'Serving OpenApi 3.0 documentation in browser'
    200-login:
      description: successful operation
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/LoginResponseBodyObject'
    200-user:
      description: Successful operation
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/User'
    200-healthy:
      description: Allication server is ready to serve traffic
    200-ready:
      description: Allication server and all external dependecies are ready to serve traffic
    204-user:
      description: Successful operation
    400-login:
      description: No body supplied or invalid format of body supplied
    400-user:
      description: Outdated session token (payload content)
    401-login:
      description: The supplied authcode is not accepted by Google API. It was expired or corrupted
    401-user:
      description: Session token is missing or expired or signature is invalid
    404-user:
      description: Requested user is not exists in database
    405:
      description: Request's http method not allowed
    503:
      description: Service unaviable. Database is not connected
    503-login:
      description: Login service unaviable. Google's id_token is deficient

  requestBodies:
    Login:
      required: true
      description: "Sending authcode from Google's redirect uri."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginRequestBodyObject'
    User:
      required: true
      description: "The new user object for update database"
      content:
       application/json:
          schema:
            $ref: '#/components/schemas/User'

  schemas:
    LoginRequestBodyObject:
      type: object
      properties:
        code:
          type: string
          example: random code string
    LoginResponseBodyObject:
      type: object
      properties:
        sessionToken:
          type: string
          example: standard and signed jwt as string
    User:
      required:
        - sub
      type: object
      properties:
        sub:
          type: string
          example: "1234567890"
        assets:
          type: array
          items:
            $ref: "#/components/schemas/Asset"
    Asset:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Flat in Downtown"
        location:
          type: string
          example: "Pecs, Kiraly str. 20."
        credentials:
          type: string
          example: "16823/A/2/12-hrsz"
        details:
          type: string
          example: "3rd floor, 63 m2, 3 rooms"
        notes:
          type: string
          example: "Janitor: Kiss Ibolya, 06-30/235-5566"
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
        machines:
          type: array
          items:
            $ref: "#/components/schemas/Machine"
    Activity:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "plumbing todos"
        todos:
          type: string
          example: "inspect pipes and faucets for leaks and clogs, change water cleaner filter "
    Machine:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "dishwasher"
        model:
          type: string
          example: "Supershiney 5000"
        unique_id:
          type: string
          example: "SUP-220065-EU-845762558"
        service:
          type: string
          example: "Express Household Appliance: 06-70/555-6688"
        todos:
          type: string
          example: "cehck and refill regeneration salt and rins ad, check and clean dirt filter"

  securitySchemes:
    authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT